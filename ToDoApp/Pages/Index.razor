@page "/"
@using ToDoApp.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@using System
@using System.Collections.Generic
@inject IHttpClientFactory ClientFactory

<PageTitle>Todo List</PageTitle>

<div class="border" style="padding: 20px;">
    <h4>New Item</h4>
    <EditForm Model="@NewItem" OnSubmit="@ItemAdded">
        <div style="display: flex; align-items: center; width: 400px;">
            <div style="margin-right: 10px">Text:</div>
            <InputText @bind-Value="NewItem.Text" class="form-control" style="margin-right: 10px" id="Item" />
            <input type="submit" class="btn btn-primary" style="margin-right: 10px" value="Add" />
            <input type="reset" class="btn btn-secondary" value="Clear" />
        </div>
    </EditForm>
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
    <div style="display: flex; flex-direction: column">
        @foreach (var todo in Todos)
        {
            <div style="display: flex; margin-bottom: 10px;">

                <div style="display: flex; align-items: center;margin-bottom: 10px;">

                    <div class="@ItemClass(todo)" style="width: 280px;">@todo.Text</div>
                </div>
                @if (todo.Completed)
                {
                    <div style="width: 100px">
                        <button class="ico-check" role="img" aria-label="Check" onclick="@(() => ToggleCompleted(todo))"></button>
                    </div>
                }
                @if (!todo.Completed)
                {
                    <div style="width: 100px">
                        <button class="ico-check" role="img" aria-label="Check" onclick="@(() => ToggleCompleted(todo))"></button>
                    </div>
                }
                <div style="width: 110px">
                    <button class="ico-times" role="img" aria-label="Delete" onclick="@(() => DeleteItem(todo))"></button>
                </div>
                <div>
                    <DateInput @bind-Value=todo.Deadline Placeholder="Enter Date" />
                </div>

            </div>

            <Card>
                <CardBody>
                    <ToDoItemForm OnItemAdded="@GetItems" CurrentToDoItem=todo />

                    @foreach (var subTodo in todo.SubItems)
                    {
                        <div style="display: flex; margin-bottom: 10px;">

                            <div style="display: flex; align-items: center;margin-bottom: 10px;">
                                <div class="@ItemClass(subTodo)" style="width: 280px;">@subTodo.Text</div>
                            </div>
                            @if (subTodo.Completed)
                            {
                                <div style="width: 100px">
                                    <button class="ico-check" role="img" aria-label="Check" onclick="@(() => ToggleCompletedChildItem(subTodo, todo))"></button>
                                </div>
                            }
                            @if (!subTodo.Completed)
                            {
                                <div style="width: 100px">
                                    <button class="ico-check" role="img" aria-label="Check" onclick="@(() => ToggleCompletedChildItem(subTodo, todo))"></button>
                                </div>
                            }
                            <div style="width: 110px">
                                <button class="ico-times" role="img" aria-label="Delete" onclick="@(() => DeleteSubItem(subTodo, todo))"></button>
                            </div>
                        </div>
                    }
                </CardBody>
            </Card>
        }
    </div>
</div>


@code {
    private IList<ToDoItem> Todos { get; set; } = new List<ToDoItem>();
    private ToDoItem CurrentToDo { get; set; }
    private ToDoItem NewItem = new ToDoItem("");
    private HttpClient Client { get; set; }

    protected override async void OnInitialized()
    {
        Client = ClientFactory.CreateClient();

        GetItems();
    }

    public async void DeleteItem(ToDoItem item)
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
           "https://localhost:7003/ToDo/delete");
        request.Content = JsonContent.Create(item);

        SendRequest(request);
    }

    public async void DeleteSubItem(ToDoItem subTodoItem, ToDoItem item)
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
           "https://localhost:7003/ToDo/delete-child-item");
        var subItemWrapper = new ToDoSubItem(item, subTodoItem);
        request.Content = JsonContent.Create(subItemWrapper);

        SendRequest(request);
    }

    public async void ToggleCompleted(ToDoItem item)
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
            "https://localhost:7003/ToDo/toggle-completed");

        request.Content = JsonContent.Create(item);

        SendRequest(request);
    }

    public async void ToggleCompletedChildItem(ToDoItem subTodoItem, ToDoItem item)
    {
        var request = new HttpRequestMessage(HttpMethod.Post,
            "https://localhost:7003/ToDo/toggle-completed-child-item");

        var subItemWrapper = new ToDoSubItem(item, subTodoItem);

        request.Content = JsonContent.Create(subItemWrapper);

        SendRequest(request);
    }

    public async void ItemAdded()
    {
        var newItem = new ToDoItem(NewItem.Text);

        var request = new HttpRequestMessage(HttpMethod.Post,
          "https://localhost:7003/ToDo/add-item");

        request.Content = JsonContent.Create(newItem);

        SendRequest(request);
        NewItem.Text = "";
    }

    public async void ChildItemAdded(ToDoItem editContext)
    {
        if (editContext is null)
        {
            throw new ArgumentNullException(nameof(editContext));
        }

        var newItem = new ToDoItem(NewItem.Text);

        var request = new HttpRequestMessage(HttpMethod.Post,
          "https://localhost:7003/ToDo/add-child-item");

        SendRequest(request);
    }

    public async void GetItems()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7003/ToDo/get");

        SendRequest(request);
    }

    public async void SendRequest(HttpRequestMessage request)
    {
        var response = await Client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var deserialized = await JsonSerializer.DeserializeAsync<IEnumerable<ToDoItem>>(responseStream);
            Todos = deserialized.ToList();
            StateHasChanged();
        }
    }

    public string ItemClass(ToDoItem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    //Collapse collapsableSubList = default!;

    //private async Task ShowContentAsync()
    //{
    //    await collapsableSubList.ToggleAsync();

    //}
}