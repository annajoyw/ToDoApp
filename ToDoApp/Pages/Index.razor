@page "/"
@using ToDoApp.Services;
@inject IToDoService _todoService;

<PageTitle>Todo List</PageTitle>

<div class="border" style="padding: 20px;">
    <h4>New Item</h4>
    <ToDoItemForm OnItemAdded="@ItemsChanged" />
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
    <div style="display: flex; flex-direction: column">
        @foreach (var todo in Todos)
        {

            <div style="display: flex; margin-bottom: 10px;">

                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="ShowContentAsync">Show content</Button>
                <Collapse @ref="collapse1">
                    <Card>
                        <CardBody>
                            Some placeholder content for the collapse component. This panel is hidden by default but revealed when the user activates the relevant trigger.
                        </CardBody>
                    </Card>
                </Collapse>

                <div style="display: flex; align-items: center;margin-bottom: 10px;">
                    <div class="@ItemClass(todo)" style="width: 280px;">@todo.Text</div>
                </div>
                @if (todo.Completed)
                {
                    <div style="width: 120px">
                        <button class="btn btn-primary" onclick="@(() => UncompleteItem(todo))">Uncomplete</button>
                    </div>
                }
                @if (!todo.Completed)
                {
                    <div style="width: 120px">
                        <button class="btn btn-primary" onclick="@(() => CompleteItem(todo))">Complete</button>
                    </div>
                }
                <div style="width: 110px">
                    <button class="btn btn-danger" onclick="@(() => DeleteItem(todo))">Delete</button>
                </div>
            </div>
        }
    </div>
</div>


@code{
    private IList<ToDoItem> Todos { get; set; } = new List<ToDoItem>();

    protected override void OnInitialized()
    {
        Todos = _todoService.GetAll().ToList();
    }

    public string ItemClass(ToDoItem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    public void ItemsChanged()
    {
        Todos = _todoService.GetAll().ToList();
        StateHasChanged();
    }

    public void DeleteItem(ToDoItem item)
    {
        _todoService.Delete(item);
        ItemsChanged();
    }

    public void CompleteItem(ToDoItem item)
    {
        _todoService.Complete(item);
        ItemsChanged();
    }

    public void UncompleteItem(ToDoItem item)
    {
        _todoService.Uncomplete(item);
        ItemsChanged();
    }

    Collapse collapse1 = default!;
    
    private async Task ShowContentAsync() => await collapse1.ShowAsync();

}