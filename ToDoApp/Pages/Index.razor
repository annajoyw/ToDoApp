@page "/"
@using ToDoApp.Services;
@inject IToDoService _todoService;
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<PageTitle>Todo List</PageTitle>

<div class="border" style="padding: 20px;">
    <h4>New Item</h4>
    <ToDoItemForm OnItemAdded="@ItemsChanged" />
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
    <div style="display: flex; flex-direction: column">
        @foreach (var todo in Todos)
        {
            <div style="display: flex; margin-bottom: 10px;">

                <div style="display: flex; align-items: center;margin-bottom: 10px;">
                   <button class="btn btn-primary" @onclick="ShowContentAsync">Show more</button>
                 
                    <div class="@ItemClass(todo)" style="width: 280px;">@todo.Text</div>
                </div>
                @if (todo.Completed)
                {
                    <div style="width: 100px">
                        <button class="ico-check" role="img" aria-label="Check" onclick="@(() => UncompleteItem(todo))"></button>
                    </div>
                }
                @if (!todo.Completed)
                {
                    <div style="width: 100px">
                        <button class="ico-check" role="img" aria-label="Check" onclick="@(() => CompleteItem(todo))"></button>
                    </div>
                }
                <div style="width: 110px">
                    <button class="ico-times" role="img" aria-label="Delete" onclick="@(() => DeleteItem(todo))"></button>
                </div>
            </div>

                 <Card>
                            <CardBody>
        
                                 <ToDoItemForm OnItemAdded="@ItemsChanged" CurrentToDoItem=todo />
        
    
                        @foreach (var subTodo in todo.SubItems){
                                     
                   
            <div style="display: flex; margin-bottom: 10px;">

                <div style="display: flex; align-items: center;margin-bottom: 10px;">
                    <div class="@ItemClass(subTodo)" style="width: 280px;">@subTodo.Text</div>
                </div>
                @if (subTodo.Completed)
                {
                    <div style="width: 100px">
                        <button class="ico-check" role="img" aria-label="Check" onclick="@(() => UncompleteItem(subTodo))"></button>
                    </div>
                }
                @if (!subTodo.Completed)
                {
                    <div style="width: 100px">
                        <button class="ico-check" role="img" aria-label="Check"  onclick="@(() => CompleteItem(subTodo))"></button>
                    </div>
                }
                <div style="width: 110px">
                    <button class="ico-times" role="img" aria-label="Delete" onclick="@(() => DeleteSubItem(subTodo, todo))"></button>
                </div>
            </div>
                     
            }
                              </CardBody>
                        </Card>
              
 
        }
    </div>
</div>


@code{
    private IList<ToDoItem> Todos { get; set; } = new List<ToDoItem>();
    private ToDoItem CurrentToDo { get; set; }
    private ToDoItem NewItem = new ToDoItem("");


    protected override async void OnInitialized()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7003/ToDo");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);
        // var deserialized = new;
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var deserialized = await JsonSerializer.DeserializeAsync<IEnumerable<ToDoItem>>(responseStream);
            Todos = deserialized.ToList();
             StateHasChanged();
           // ItemsChanged();
        }

       // Todos = _todoService.GetAll().ToList();
        CurrentToDo = _todoService.GetSelected();
    }

  

    public string ItemClass(ToDoItem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    public void ItemsChanged()
    {
        Todos = _todoService.GetAll().ToList();
        StateHasChanged();
    }

    public void DeleteItem(ToDoItem item)
    {
        _todoService.Delete(item);
        ItemsChanged();
    }

    public void DeleteSubItem(ToDoItem subTodoItem, ToDoItem item)
    {
        _todoService.DeleteSubTodo(subTodoItem, item);
        ItemsChanged();
    }

    public void CompleteItem(ToDoItem item)
    {
        _todoService.Complete(item);
        ItemsChanged();
    }

    public void UncompleteItem(ToDoItem item)
    {
        _todoService.Uncomplete(item);
        ItemsChanged();
    }

    Collapse collapsableSubList = default!;

    private async Task ShowContentAsync()
    {
        await collapsableSubList.ToggleAsync();
       
    }  
}