@using ToDoApp.Services;
@inject IToDoService _todoService;
<EditForm Model="@NewItem" OnSubmit="@ItemAdded">
    <div style="display: flex; align-items: center; width: 400px;">
        <div style="margin-right: 10px">Text:</div>
        <InputText @bind-Value="NewItem.Text" class="form-control" style="margin-right: 10px" id="Item" />
        <input type="submit" class="btn btn-primary" style="margin-right: 10px" value="Add" />
        <input type="reset" class="btn btn-secondary" value="Clear" />
    </div>
</EditForm>

  @foreach (var todo in CurrentTodo.SubItems)
        {
            <div style="display: flex; margin-bottom: 10px;">

                <div style="display: flex; align-items: center;margin-bottom: 10px;">
                    <div style="width: 280px;">@todo.Text</div>
                </div>
                @if (todo.Completed)
                {
                    <div style="width: 120px">
                        <button class="btn btn-primary" onclick="@(() => UncompleteItem(todo))">Uncomplete</button>
                    </div>
                }
                @if (!todo.Completed)
                {
                    <div style="width: 120px">
                        <button class="btn btn-primary" onclick="@(() => CompleteItem(todo))">Complete</button>
                    </div>
                }
                <div style="width: 110px">
                    <button class="btn btn-danger" onclick="@(() => DeleteItem(todo))">Delete</button>
                </div>
            </div>
            }

@code {
    [Parameter]
    public ToDoItem CurrentTodo { get; set; } 

    //   protected override void OnInitialized()
    //{
    //    Todos = _todoService.GetAll().ToList();
    //}
    //    public string ItemClass(ToDoItem item)
    //{
    //    return item.Completed ? "item-completed" : "";
    //}
    [Parameter]
    public Action OnItemAdded { get; set; }

    private ToDoItem NewItem = new ToDoItem("");

    public void ItemAdded()
    {
        var newItem = new ToDoItem(NewItem.Text);
        NewItem.Text = "";
        // _todoService.Add(newItem);
        CurrentTodo.SubItems.Add(newItem);
        if (OnItemAdded != null)
        {
            OnItemAdded();
        }
        ItemsChanged(CurrentTodo);
    }

    public void DeleteItem(ToDoItem item)
    {
        _todoService.Delete(item);
        ItemsChanged(item);
    }

    public void CompleteItem(ToDoItem item)
    {
        _todoService.Complete(item);
        ItemsChanged(item);
    }

    public void UncompleteItem(ToDoItem item)
    {
        _todoService.Uncomplete(item);
        ItemsChanged(item);
    }

    private IList<ToDoItem> Todos { get; set; } = new List<ToDoItem>();


    public void ItemsChanged(ToDoItem currentTodo)
    {
       // CurrentTodo.SubItems = CurrentTodo.SubItems;
        StateHasChanged();
    }
}
